        // hello.reflect.servo.44.2.c
        // light reflection synchronous detection hello-world
        //    9600 baud FTDI interface
        //
        // Neil Gershenfeld
        // 10/25/12
        //
        // (c) Massachusetts Institute of Technology 2012
        // This work may be reproduced, modified, distributed,
        // performed, and displayed for any purpose. Copyright is
        // retained and must be preserved. The work is provided
        // as is; no warranty is provided, and users accept all 
        // liability.
        //
        //
        // Modified by Keith Tan. FABnovation***
        // Added code for servo outputs
        // 14/6/16
        //
        
        #include <avr/io.h>
        #include <util/delay.h>
        
        #define output(directions,pin) (directions |= pin) // set port direction for output
        #define set(port,pin) (port |= pin) // set port pin
        #define clear(port,pin) (port &= (~pin)) // clear port pin
        #define pin_test(pins,pin) (pins & pin) // test for port pin
        #define bit_test(byte,bit) (byte & (1 << bit)) // test for bit set
        #define bit_delay_time 102 // bit delay for 9600 with overhead
        #define bit_delay() _delay_us(bit_delay_time) // RS232 bit delay
        #define half_bit_delay() _delay_us(bit_delay_time/2) // RS232 half bit delay
        #define char_delay() _delay_ms(10) // char delay
        #define position_delay() _delay_ms(1000) // PWM delay***
        
        //Define T44 to Computer (FTDI) pin***
        #define serial_port PORTA
        #define serial_direction DDRA
        #define serial_pin_out (1 << PA1)
        
        //Define PWM pins***
        #define PWM_port PORTA
        #define PWM_direction DDRA
        #define PWM_pin_0 (1 << PA7)
        #define PWM_pin_1 (1 << PB0)
        
        #define nloop 100 // Sensor- number of loops to accumulate
        #define loop_count 30 // PWM- number of loops to accumulate***
        
        void put_char(volatile unsigned char *port, unsigned char pin, char txchar) {
           //
           // send character in txchar on port pin
           //    assumes line driver (inverts bits)
           //
           // start bit
           //
           clear(*port,pin);
           bit_delay();
           //
           // unrolled loop to write data bits
           //
           if bit_test(txchar,0)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           if bit_test(txchar,1)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           if bit_test(txchar,2)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           if bit_test(txchar,3)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           if bit_test(txchar,4)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           if bit_test(txchar,5)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           if bit_test(txchar,6)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           if bit_test(txchar,7)
              set(*port,pin);
           else
              clear(*port,pin);
           bit_delay();
           //
           // stop bit
           //
           set(*port,pin);
           bit_delay();
           //
           // char delay
           //
           bit_delay();
           }
        
        int main(void) {
           //
           // main
           //
           //Sensor***
           static char chr;
           //PWM***
           static uint8_t i;
           static uint16_t on,off;
           //
           //
           // set clock divider to /1
           //
           CLKPR = (1 << CLKPCE);
           CLKPR = (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0);
           //
           // initialize output pins
           //
           set(serial_port, serial_pin_out);
           output(serial_direction, serial_pin_out);
           set(PWM_port, PWM_pin_0);
           output(PWM_direction, PWM_pin_0);
           set(PWM_port, PWM_pin_1);
           output(PWM_direction, PWM_pin_1);
           //
           //
           //
           // init A/D***
           //
           ADCSRA = (1 << ADEN) // enable
           | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // prescaler /128
           //
           // main loop
           //
           while (1) {
              //
              //Select A/D Channel 1***
              ADMUX = (0 << REFS1) | (0 << REFS0) // Vcc ref
              | (0 << ADLAR) // right adjust
              | (0 << MUX5) | (0 << MUX4) | (0 << MUX3) | (0 << MUX2) | (1 << MUX1) | (0 << MUX0); // ADC2 (Pin PA2)***
              //
              // start conversion***
              //
              ADCSRA |= (1 << ADSC);
              //
              // wait for completion
              //
              while (ADCSRA & (1 << ADSC))
              ;
              //
              // send/read result 1
              //
              chr = ADCL;
              put_char(&serial_port, serial_pin_out, chr);
              char_delay();
              chr = ADCH;
              put_char(&serial_port, serial_pin_out, chr);
              char_delay();
              //
              // save result
              //
              off += ADC;
              //
              //
              //Select A/D Channel 2***
              ADMUX = (0 << REFS1) | (0 << REFS0) // Vcc ref
              | (0 << ADLAR) // right adjust
              | (0 << MUX5) | (0 << MUX4) | (0 << MUX3) | (0 << MUX2) | (1 << MUX1) | (1 << MUX0); // ADC3 (Pin PA3)***
              //
              // start conversion***
              //
              ADCSRA |= (1 << ADSC);
              //
              // wait for completion
              //
              while (ADCSRA & (1 << ADSC))
              ;
              //
              // send/read result 1
              //
              chr = ADCL;
              put_char(&serial_port, serial_pin_out, chr);
              char_delay();
              chr = ADCH;
              put_char(&serial_port, serial_pin_out, chr);
              char_delay();
              //
              // save result
              //
              on += ADC;
              //
             
              //Steven's Method
              //code = ADCH*256+ADCL;
              //if (code>200)
              //   code=200;
              //t = (10*code+1000);
        
              //set(PWM_port, PWM_pin_0);
              //delay_us(t);
              //clear(PWM_port,PWM_pin_0);
              //delay_us(20000-t);
        
              //set(PWM_port, PWM_pin_1);
              //delay_us(t);
              //clear(PWM_port,PWM_pin_1);
              //delay_us(20000-t);
        
        
              //
              // accumulate***
              //
              on = 0;
              off = 0;
              for (i = 0; i < loop_count; ++i) {
                 //
                 // Servo on***
                 //
                 clear(PWM_port,PWM_pin_0);
                 clear(PWM_port,PWM_pin_1);
                 _delay_us(19000);
                 }
                 //
                 // Servo off***
                 //
                 set(PWM_port,PWM_pin_0);
                 set(PWM_port,PWM_pin_1);
                 _delay_us(1000);
                 }
              //
              // send framing
              //
              put_char(&serial_port, serial_pin_out, 1);
              char_delay();
              put_char(&serial_port, serial_pin_out, 2);
              char_delay();
              put_char(&serial_port, serial_pin_out, 3);
              char_delay();
              put_char(&serial_port, serial_pin_out, 4);
              char_delay();
              //
              // send result
              //
              put_char(&serial_port, serial_pin_out, (on & 255));
              char_delay();
              put_char(&serial_port, serial_pin_out, ((on >> 8) & 255));
              char_delay();
              put_char(&serial_port, serial_pin_out, (off & 255));
              char_delay();
              put_char(&serial_port, serial_pin_out, ((off >> 8) & 255));
              char_delay();
              } 